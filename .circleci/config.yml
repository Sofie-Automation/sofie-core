version: 2.1
jobs:
  build-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-cache-{{ .Branch }}-{{ checksum "meteor/package-lock.json" }}
            - v3-node-cache-{{ .Branch }}
      - run:
          name: Meteor NPM install
          command: cd meteor && meteor npm install
          no_output_timeout: 60m
      - run:
          name: Build packages
          command: cd packages && yarn install && yarn build
          no_output_timeout: 60m
      - run:
          name: Meteor Build
          command: cd meteor && NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
          no_output_timeout: 60m
      - run:
          name: Meteor Bundle NPM Build
          command: cd meteor/bundle/programs/server && npm install
          no_output_timeout: 60m
      - save_cache:
          key: v3-node-cache-{{ .Branch }}-{{ checksum "meteor/package-lock.json" }}
          paths:
            - meteor/node_modules
            - ~/.meteor
      - save_cache:
          key: v3-node-cache-{{ .Branch }}
          paths:
            - meteor/node_modules
            - ~/.meteor
      - persist_to_workspace:
          root: .
          paths:
            - .

  test-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Run tests and send coverage
          command: cd meteor && meteor npm install && meteor npm run ci
          no_output_timeout: 60m
  lint-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Typecheck and lint code
          command: cd meteor && meteor npm install && meteor npm run ci:lint
          no_output_timeout: 15m

  lint-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run: cd packages && yarn install
      - run:
          name: Run linter
          command: cd packages/<< parameters.lib-name >> && yarn lint
          no_output_timeout: 60m

  test-libs:
    parameters:
      lib-name:
        type: string
      node-version:
        type: string
    docker:
      - image: circleci/node:<< parameters.node-version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run: cd packages && yarn install
      - run:
          name: Run tests
          command: cd packages/<< parameters.lib-name >> && yarn test
          no_output_timeout: 60m
      - when: 
          condition: << parameters.node-version >> == 12 # run for the 'main' version
          steps:
            - run:
                name: Send coverage
                command: cd packages/<< parameters.lib-name >> && yarn send-coverage
  prerelease-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Check release is desired
          # TODO - or if something changed? perhaps always on the releaseX branches?
          command: |
            if [ -z "$NPM_TOKEN" ]; then
              echo "No Token"
              circleci-agent step halt
            fi
            if ! git log --format=oneline -n 1 | grep -q "\[publish\]"; then
              echo "Skip"
              circleci-agent step halt
            else
              echo "Publish prerelease"
            fi
      - run: 
          name: yarn install
          command: cd packages && yarn
      # Locally bump the version
      - run: 
          name: yarn release
          command: |
            cd packages/<< parameters.lib-name >>
            COMMIT_TIMESTAMP=$(git log -1 --pretty=format:%ct HEAD)
            COMMIT_DATE=$(date -d @$COMMIT_TIMESTAMP +%Y%m%d-%H%M%S)
            GIT_HASH=$(git rev-parse --short HEAD)
            PRERELEASE_TAG=nightly-$(echo $CIRCLE_BRANCH | sed -r 's/[^a-z0-9]+/-/gi')
            yarn release --prerelease $PRERELEASE_TAG-$COMMIT_DATE-$GIT_HASH --skip.changelog --skip.tag --skip.commit
      # Build and deploy
      - run: 
          name: yarn build
          command: cd packages/<< parameters.lib-name >> && yarn build
      - run:
          name: Publish to NPM with yarn
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            cd packages/<< parameters.lib-name >>
            NEW_VERSION=$(node -p "require('./package.json').version")
            yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 --tag nightly
  release-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run:
          name: Determine release type
          command: |
            if [ -z "$NPM_TOKEN" ]; then
              echo "No Token"
              circleci-agent step halt
            fi

            cd packages/<< parameters.lib-name >>
            PACKAGE_NAME=$(yarn info -s . name)
            PUBLISHED_VERSION=$(yarn info -s $PACKAGE_NAME version)
            THIS_VERSION=$(node -p "require('./package.json').version")
            # Simple bash helper to comapre version numbers
            verlte() {
              [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt() {
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }
            if verlt $PUBLISHED_VERSION $THIS_VERSION
            then
              echo 'export PUBLISH_ARGS="--tag latest"' >> $BASH_ENV
              echo "Publishing latest"
            else
              echo 'export PUBLISH_ARGS="--tag hotfix"' >> $BASH_ENV
              echo "Publishing hotfix"
            fi
            source $BASH_ENV
      - run: 
          name: yarn build
          command: cd packages/<< parameters.lib-name >> && yarn build
      - run:
          name: Publish to NPM with yarn
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            cd packages/<< parameters.lib-name >>
            NEW_VERSION=$(node -p "require('./package.json').version")
            yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 $PUBLISH_ARGS
            
  typedoc-libs:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run: 
          # TODO - we should only do this if the latest release
          name: publish typedoc
          command: |
            cd packages
            yarn docs
            gh-pages -d docs

  validate-prod-dependencies-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run:
          name: Validate production dependencies
          command: |
            cd packages/<< parameters.lib-name >>
            if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
              yarn validate:dependencies
            else
              echo "Skipping audit"
            fi

  validate-all-dependencies-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run:
          name: Validate production dependencies
          command: cd packages/<< parameters.lib-name >> && yarn validate:dependencies
      - run:
          name: Validate dev dependencies
          command: cd packages/<< parameters.lib-name >> && yarn validate:dev-dependencies

  validate-prod-dependencies-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Validate production dependencies for vulnerabilities and compatible licenses
          command: cd meteor && meteor npm install && meteor npm run postinstall && meteor npm run validate:prod-dependencies
          no_output_timeout: 15m
  validate-all-dependencies-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Validate all dependencies for vulnerabilities
          command: cd meteor && meteor npm install && meteor npm run postinstall && meteor npm run validate:all-dependencies
          no_output_timeout: 15m

  publish-tag:
    docker:
      - image: circleci/buildpack-deps:buster
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t server-core:$CIRCLE_TAG
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            if [ -z "$DOCKERHUB_IMAGE" ]; then
              echo "Skipping"
            else
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_TAG $DOCKERHUB_IMAGE:$CIRCLE_TAG
              docker push $DOCKERHUB_IMAGE:$CIRCLE_TAG
            fi
      - run:
          name: Publish Docker Image to Github Package Registry
          command: |
            if [ -z "$GITHUB_PASS" ]; then
              echo "Skipping"
            else
              echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_TAG docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
              docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
            fi
  publish-branch:
    docker:
      - image: circleci/buildpack-deps:buster
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t server-core:$CIRCLE_BRANCH
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            if [ -z "$DOCKERHUB_IMAGE" ]; then
              echo "Skipping"
            else
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_BRANCH $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
              docker push $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
            fi
      - run:
          name: Publish Docker Image to Github Package Registry
          command: |
            if [ -z "$GITHUB_PASS" ]; then
              echo "Skipping"
            else
              echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_BRANCH docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
              docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - validate-all-dependencies-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - validate-prod-dependencies-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - validate-all-dependencies-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - validate-prod-dependencies-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - build-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - lint-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - test-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/

      - test-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
              node-version:
                - '10'
                - '12'
                - '14'
                # - latest # currently 15
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - lint-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/

      - publish-tag:
          requires:
            - test-core
            - test-libs
            - validate-prod-dependencies-core
            - validate-prod-dependencies-libs
            - build-core
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
      - publish-branch:
          requires:
            - build-core
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
                - develop
                - stage
                - /release\d+/

      - prerelease-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          requires:
            - test-libs
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - release-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          requires:
            - publish-tag
            - test-libs
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
      - typedoc-libs:
          requires:
            - release-libs
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
        

name: Node CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v**'

jobs:
  lint-core:
    name: Typecheck and Lint Core
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup-meteor
    - name: restore node_modules
      uses: actions/cache@v2
      with:
        path: |
          meteor/node_modules
        key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
    - name: Prepare Environment
      run: |
        cd meteor
        meteor npm install
        meteor npm run ci:prepare
      env:
        CI: true
    - name: Run typecheck and linter
      run: |
        cd meteor
        meteor npm run ci:lint
      env:
        CI: true
  test-core:
    name: Test Core
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup-meteor
    - name: restore node_modules
      uses: actions/cache@v2
      with:
        path: |
          meteor/node_modules
        key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
    - name: Prepare Environment
      run: |
        cd meteor
        meteor npm install
        meteor npm run ci:prepare
      env:
        CI: true
    - name: Run Tests
      run: |
        cd meteor
        meteor npm run ci
      env:
        CI: true

  validate-prod-dependencies-core:
    name: Validate Core production dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup-meteor
    - name: restore node_modules
      uses: actions/cache@v2
      with:
        path: |
          meteor/node_modules
        key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
    - name: Validate production dependencies for vulnerabilities and compatible licenses
      run: |
        cd meteor
        meteor npm install
        meteor npm run validate:prod-dependencies
      env:
        CI: true
  validate-all-dependencies-core:
    name: Validate all Core dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup-meteor
    - name: restore node_modules
      uses: actions/cache@v2
      with:
        path: |
          meteor/node_modules
        key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
    - name: Validate all dependencies for vulnerabilities
      run: |
        cd meteor
        meteor npm install
        meteor npm run validate:all-dependencies
      env:
        CI: true
  build-core:
    # TODO - should this be dependant on tests or something passing if we are on a tag?
    name: Build Core and publish docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/setup-meteor
    - name: Prepare Environment
      run: |
        cd meteor
        meteor npm install
    - name: Build libs
      run: |
        cd packages
        yarn install
        yarn build
    - name: Meteor Build
      run: |
        cd meteor
        NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
    - name: Meteor Bundle NPM Build
      run: |
        cd meteor/bundle/programs/server
        meteor npm install
    - name: Get the Docker tag
      id: docker-tag
      uses: yuya-takeyama/docker-tag-from-github-ref-action@2b0614b1338c8f19dd9d3ea433ca9bc0cc7057ba
      with:
        remove-version-tag-prefix: false
    - name: Determine images to publish
      id: image-tags
      run: |
        IMAGES=
        DOCKER_TAG=${{ steps.docker-tag.outputs.tag }}
        # check if a release branch, or master, or a tag
        if [[ $DOCKER_TAG =~ ^release([0-9]+)$ || $DOCKER_TAG == "latest" || "${{ steps.docker-tag.outputs.tag }}" == refs/tags/* ]]
        then
          # If we have a dockerhub image name, then setup to publish there
          if [ -z "${{ secrets.DOCKERHUB_IMAGE }}" ]
          then
            DOCKERHUB_PUBLISH="0"
          else
            DOCKERHUB_PUBLISH="1"
            IMAGES="${{ secrets.DOCKERHUB_IMAGE }}:$DOCKER_TAG"$'\n'$IMAGES
          fi
          # debug output
          echo dockerhub-publish $DOCKERHUB_PUBLISH
          echo images $IMAGES
          echo ::set-output name=images::"$IMAGES"
          echo ::set-output name=dockerhub-publish::"$DOCKERHUB_PUBLISH"
        else
          echo "Skipping docker build"
        fi
    - name: Set up Docker Buildx
      if: ${{ steps.image-tags.outputs.images }}
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: steps.image-tags.outputs.images && steps.image-tags.outputs.dockerhub-publish == '1'
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    # TODO - do we want this?
    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v1 
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_owner }}
    #     password: ${{ secrets.CR_PAT }}
    - name: Build and push
      uses: docker/build-push-action@v2
      if: ${{ steps.image-tags.outputs.images }}
      with:
        context: .
        file: ./Dockerfile.circle
        push: true
        tags: ${{ steps.image-tags.outputs.images }}

  lint-libs:
    name: Lint Lib
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Prepare Environment
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Run typecheck and linter
      run: |
        cd packages/${{ matrix.lib-name }}
        yarn lint
      env:
        CI: true

  test-libs:
    name: Test Lib
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Prepare Environment
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Run typecheck and linter
      run: |
        cd packages/${{ matrix.lib-name }}
        yarn unit
      env:
        CI: true
    - name: Send coverage
      if: matrix.node-version == '12.x'
      run: |
        cd packages/${{ matrix.lib-name }}
        yarn send-coverage
      env:
        CI: true

  typedoc-libs:
    name: Publish Libs Typedoc
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    # only run for release tags
    # TODO - we should only do this if the latest release
    if: contains(github.ref, 'refs/tags/')

    needs:
      release-libs

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Prepare Environment
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Run typecheck and linter
      run: |
        cd packages
        yarn docs
        yarn gh-pages -d docs
      env:
        CI: true

  prerelease-libs:
    name: Prerelease Lib
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    # only run for branches
    if: contains(github.ref, 'refs/heads/')

    needs:
      - test-libs

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Check release is desired
      # TODO - or if something changed? perhaps always on the releaseX branches?
      id: do-publish
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "No Token"
        elif ! git log --format=oneline -n 1 | grep -q "\[publish\]"; then
          echo "Skip"
        else
          echo "Publish prerelease"
          echo ::set-output name=publish::"1"
        fi
    - name: Prepare Environment
      if: ${{ steps.do-publish.outputs.publish }}
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Get the Prerelease tag
      id: prerelease-tag
      uses: yuya-takeyama/docker-tag-from-github-ref-action@2b0614b1338c8f19dd9d3ea433ca9bc0cc7057ba
      with:
        remove-version-tag-prefix: false
    - name: Bump version and build
      if: ${{ steps.do-publish.outputs.publish }}
      run: |
        cd packages/${{ matrix.lib-name }}
        COMMIT_TIMESTAMP=$(git log -1 --pretty=format:%ct HEAD)
        COMMIT_DATE=$(date -d @$COMMIT_TIMESTAMP +%Y%m%d-%H%M%S)
        GIT_HASH=$(git rev-parse --short HEAD)
        PRERELEASE_TAG=nightly-$(echo "${{ steps.prerelease-tag.outputs.tag }}" | sed -r 's/[^a-z0-9]+/-/gi')
        yarn release --prerelease $PRERELEASE_TAG-$COMMIT_DATE-$GIT_HASH --skip.changelog --skip.tag --skip.commit
        yarn build
      env:
        CI: true
    - name: Publish to NPM
      if: ${{ steps.do-publish.outputs.publish }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
        cd packages/${{ matrix.lib-name }}
        NEW_VERSION=$(node -p "require('./package.json').version")
        yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 --tag nightly
      env:
        CI: true


  release-libs:
    name: Release Lib
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    # only run for tags
    if: contains(github.ref, 'refs/tags/')

    needs:
      - test-libs
      # core must be published first
      - build-core

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Check release is desired
      id: do-publish
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "No Token"
        else

          cd packages/${{ matrix.lib-name }}
          PACKAGE_NAME=$(yarn info -s . name)
          PUBLISHED_VERSION=$(yarn info -s $PACKAGE_NAME version)
          THIS_VERSION=$(node -p "require('./package.json').version")
          # Simple bash helper to comapre version numbers
          verlte() {
            [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
          }
          verlt() {
            [ "$1" = "$2" ] && return 1 || verlte $1 $2
          }
          if verlt $PUBLISHED_VERSION $THIS_VERSION
          then
            echo "Publishing latest"
            echo ::set-output name=tag::"latest"
          else
            echo "Publishing hotfix"
            echo ::set-output name=tag::"hotfix"
          fi

        fi
    - name: Prepare Environment
      if: ${{ steps.do-publish.outputs.tag }}
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Bump version and build
      if: ${{ steps.do-publish.outputs.tag }}
      run: |
        cd packages/${{ matrix.lib-name }}
        yarn build
      env:
        CI: true
    - name: Publish to NPM
      if: ${{ steps.do-publish.outputs.tag }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
        cd packages/${{ matrix.lib-name }}
        NEW_VERSION=$(node -p "require('./package.json').version")
        yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 --tag ${{ steps.do-publish.outputs.tag }}
      env:
        CI: true

  validate-prod-dependencies-libs:
    name: Validate Lib production dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Prepare Environment
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Validate production dependencies
      run: |
        cd packages/${{ matrix.lib-name }}
        if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
          yarn validate:dependencies
        else
          echo "Skipping audit"
        fi
      env:
        CI: true

  validate-all-dependencies-libs:
    name: Validate all Lib dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      matrix:
        lib-name: [blueprints-integration, server-core-integration]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Prepare Environment
      run: |
        cd packages 
        yarn install
      env:
        CI: true
    - name: Validate production dependencies
      run: |
        cd packages/${{ matrix.lib-name }}
          yarn validate:dependencies
      env:
        CI: true
    - name: Validate dev dependencies
      run: |
        cd packages/${{ matrix.lib-name }}
          yarn validate:dev-dependencies
      env:
        CI: true
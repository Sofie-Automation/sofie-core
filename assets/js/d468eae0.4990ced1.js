"use strict";(self.webpackChunksofie_documentation=self.webpackChunksofie_documentation||[]).push([[9492],{96620:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"for-developers/device-integrations/tsr-types","title":"TSR Types","description":"The TSR monorepo contains a types package called timeline-state-resolver-types. The intent behind this package is that you may want to generate a Timeline in a place where you don\'t want to import the TSR library for performance reasons. Blueprints are a good example of this since the webpack setup does not deal well with importing everything.","source":"@site/docs/for-developers/device-integrations/tsr-types.md","sourceDirName":"for-developers/device-integrations","slug":"/for-developers/device-integrations/tsr-types","permalink":"/sofie-core/docs/for-developers/device-integrations/tsr-types","draft":false,"unlisted":false,"editUrl":"https://github.com/Sofie-Automation/sofie-core/edit/main/packages/documentation/docs/for-developers/device-integrations/tsr-types.md","tags":[],"version":"current","frontMatter":{},"sidebar":"forDevelopers","previous":{"title":"TSR Integration API","permalink":"/sofie-core/docs/for-developers/device-integrations/tsr-api"},"next":{"title":"Applications & Libraries","permalink":"/sofie-core/docs/for-developers/libraries"}}');var i=o(62540),s=o(43023);const r={},a="TSR Types",c={},d=[{value:"What you should know about this",id:"what-you-should-know-about-this",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"tsr-types",children:"TSR Types"})}),"\n",(0,i.jsxs)(t.p,{children:["The TSR monorepo contains a types package called ",(0,i.jsx)(t.code,{children:"timeline-state-resolver-types"}),". The intent behind this package is that you may want to generate a Timeline in a place where you don't want to import the TSR library for performance reasons. Blueprints are a good example of this since the webpack setup does not deal well with importing everything."]}),"\n",(0,i.jsx)(t.h2,{id:"what-you-should-know-about-this",children:"What you should know about this"}),"\n",(0,i.jsxs)(t.p,{children:["When the TSR is built the types for the Mappings, Options and Actions for your integration will be auto generated under ",(0,i.jsx)(t.code,{children:"src/generated"}),". In addition to this you should describe the content property of the timeline objects in a file using interfaces. If you're adding a new integration also add it to the ",(0,i.jsx)(t.code,{children:"DeviceType"})," enum as described in ",(0,i.jsx)(t.code,{children:"index.ts"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},43023:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(63696);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);
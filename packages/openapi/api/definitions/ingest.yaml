title: ingest
description: Ingest methods
resources:
  ingestPlaylists:
    get:
      operationId: getIngestPlaylists
      tags:
        - ingest
      summary: Gets ingest data for all Playlists in Sofie.
      responses:
        200:
          description: Command successfully handled - returns an array of Playlists with their playlistIds and list of Rundow.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                  playlists:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingestPlaylistItem'
                    example:
                      - playlistId: 'playlist1'
                        rundowns:
                          - externalId: 'playlist1Rundown1'
                          - externalId: 'playlist1Rundown2'
                      - playlistId: 'playlist2'
                        rundowns:
                          - externalId: 'playlist2Rundown1'
                          - externalId: 'playlist2Rundown2'
                          - externalId: 'playlist2Rundown3'
    delete:
      operationId: deleteIngestPlaylists
      tags:
        - ingest
      summary: Delete multiple playlists.
      responses:
        200:
          description: Playlists removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
  ingestPlaylist:
    get:
      operationId: getIngestPlaylist
      tags:
        - ingest
      summary: Gets ingest data for a specific Playlist from Sofie.
      parameters:
        - name: playlistId
          in: path
          description: Requested Playlist.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Playlist is returned.
          headers:
            ETag:
              schema:
                type: string
              description: Version of Playlist, if known.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                  playlist:
                    $ref: '#/components/schemas/ingestPlaylist'
                example:
                  status: 200
                  playlist:
                    name: playlist1
                required:
                  - status
                  - playlist
                additionalProperties: false
        404:
          description: Invalid playlistId
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
    delete:
      operationId: deleteIngestPlaylist
      tags:
        - ingest
      summary: Deletes a specified ingest Playlist. Resources under the Playlist (e.g. Rundowns) will also be removed.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Playlist removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
  ingestRundowns:
    get:
      operationId: getIngestRundowns
      tags:
        - ingest
      summary: Gets ingest data for all Rundowns belonging to a Playlist.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to get all Rundowns for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Command successfully handled - returns an array of Rundowns.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                  rundowns:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingestRundownItem'
                    example:
                      - externalId: rundown1
                required:
                  - status
                  - playlists
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
    put:
      operationId: putIngestRundowns
      tags:
        - ingest
      summary: Creates/updates the Rundowns in a Playlist. Any existing Rundowns in the Playlist that are not included in this list will be deleted (including their Segments and Parts). Rundowns will be placed in the Playlist in the order specified by their individual ranks. If the creation/deletion/updating of any Rundown fails all changes will be discarded. ETags are not supported for bulk updates, no version information will be stored for any of the created/modified Rundowns.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to create/update all Rundowns for.
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, each Rundown will only be updated if its version does not match one of the specified ETags. If no ETag is found for a Rundown, the new data will replace whatever currently exists, regardless of whether the data is actually the same.
      requestBody:
        description: Contains the Rundown data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rundowns:
                  type: array
                  items:
                    $ref: '#/components/schemas/ingestRundown'
                  example:
                    - name: rundown1
                      source: 'Our Company - Some Product Name'
                      rank: 0
              required:
                - rundowns
              additionalProperties: false
      responses:
        200:
          description: Rundowns have been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
    delete:
      operationId: deleteIngestRundowns
      tags:
        - ingest
      summary: Delete multiple rundowns.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Part belongs to.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Rundown removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
  ingestRundown:
    get:
      operationId: getIngestRundown
      tags:
        - ingest
      summary: Gets ingest data for a specific Rundown.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Rundown belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to return.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Rundown is returned.
          headers:
            ETag:
              schema:
                type: string
              description: Version of Rundown, if known.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                  rundown:
                    $ref: '#/components/schemas/ingestRundown'
                example:
                  status: 200
                  rundown:
                    name: rundown1
                    source: 'Our Company - Some Product Name'
                    rank: 0
                required:
                  - status
                  - rundown
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
    put:
      operationId: putIngestRundown
      tags:
        - ingest
      summary: Creates a new or updates an existing Rundown.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to ingest Rundown into.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to create/update.
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Rundown will only be updated if one of the specified ETags does not match. If unspecified, the new data will replace whatever currently exists, regardless of whether the data is actually the same.
        - name: If-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Rundown will only be updated if one of the specified ETags matches.
        - name: ETag
          in: header
          required: true
          schema:
            type: string
            example: '123456789'
          description: ETag to use as version information for Rundown.
      requestBody:
        description: Contains the Rundown data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingestRundown'
            example:
              name: rundown1
              source: 'Our Company - Some Product Name'
              rank: 0
      responses:
        200:
          description: Rundown has been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        201:
          description: Rundown has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 201
                    example: 201
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
    delete:
      operationId: deleteIngestRundown
      tags:
        - ingest
      summary: Deletes a specified ingest Rundown. Resources under the Rundown (e.g. Segments) will also be removed.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Rundown belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Rundown removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
  ingestSegments:
    get:
      operationId: getIngestSegments
      tags:
        - ingest
      summary: Gets the ingest data for all Segments belonging to a Rundown.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Rundown belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to get Segments for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Command successfully handled - returns an array of Segments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                  segments:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingestSegmentItem'
                    example:
                      - externalId: segment1
                required:
                  - status
                  - segments
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
    put:
      operationId: putIngestSegments
      tags:
        - ingest
      summary: Creates/updates the Segments in a Rundown. Any existing Segments in the Rundown that are not included in this list will be deleted (including their Parts). Segments will be placed in the Rundown in the order specified by their individual ranks. If the creation/deletion/updating of any Segment fails all changes will be discarded.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Rundown belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to create/update all Segments for.
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, each Segment will only be updated if its version does not match one of the specified ETags. If no ETag is found for a Segment, the new data will replace whatever currently exists, regardless of whether the data is actually the same. ETags are not supported for bulk updates, no version information will be stored for any of the created/modified Rundowns.
      requestBody:
        description: Contains the Segment data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                segments:
                  type: array
                  items:
                    $ref: '#/components/schemas/ingestSegment'
                  example:
                    - name: segment1
                      rank: 0
              required:
                - segments
              additionalProperties: false
      responses:
        200:
          description: Segments have been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
    delete:
      operationId: deleteIngestSegments
      tags:
        - ingest
      summary: Delete multiple segments.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the ingest Part belongs to.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Segments removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
  ingestSegment:
    get:
      operationId: getIngestSegment
      tags:
        - ingest
      summary: Gets ingest data for a specific Segment.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Segment belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the Segment belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to create/update.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Segment is returned.
          headers:
            ETag:
              schema:
                type: string
              description: Version of Segment, if known.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                  segment:
                    $ref: '#/components/schemas/ingestSegment'
                example:
                  status: 200
                  segment:
                    name: segment1
                    rank: 0
                required:
                  - status
                  - segment
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/segmentNotFound'
    put:
      operationId: putIngestSegment
      tags:
        - ingest
      summary: Creates a new or updates an existing Segment.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to ingest Segment into.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to ingest Segment into.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to create/update.
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Segment will only be updated if one of the specified ETags does not match. If unspecified, the new data will replace whatever currently exists, regardless of whether the data is actually the same.
        - name: If-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Segment will only be updated if one of the specified ETags matches.
        - name: ETag
          in: header
          required: true
          schema:
            type: string
          description: ETag to use as version information for Segment.
      requestBody:
        description: Contains the Segment data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingestSegment'
            example:
              name: segment1
              rank: 0
      responses:
        200:
          description: Segment has been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        201:
          description: Segment has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 201
                    example: 201
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
    delete:
      operationId: deleteIngestSegment
      tags:
        - ingest
      summary: Deletes a specified ingest Segment. Resources under the Segment (e.g. Parts) will also be removed.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Segment belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the ingest Segment belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Segment removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
  ingestParts:
    get:
      operationId: getIngestParts
      tags:
        - ingest
      summary: Gets the ingest data for all Parts belonging to a Segment.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Segment belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the Segment belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to get Parts for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Command successfully handled - returns an array of Parts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                  parts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ingestPartItem'
                    example:
                      - externalId: part1
                required:
                  - status
                  - parts
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/segmentNotFound'
    put:
      operationId: putIngestParts
      tags:
        - ingest
      summary: Creates/updates the Parts in a Segment. Any existing Parts in the Segment that are not included in this list will be deleted. Parts will be placed in the Segment in the order specified by their individual ranks. If the creation/deletion/updating of any Parts fails all changes will be discarded.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Segment belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the Segment belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to create/update all Parts for.
          required: true
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, each Part will only be updated if its version does not match one of the specified ETags. If no ETag is found for a Part, the new data will replace whatever currently exists, regardless of whether the data is actually the same. ETags are not supported for bulk updates, no version information will be stored for any of the created/modified Rundowns.
      requestBody:
        description: Contains the Part data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parts:
                  type: array
                  items:
                    $ref: '#/components/schemas/ingestPart'
                  example:
                    - externalId: part1
              required:
                - parts
              additionalProperties: false
      responses:
        200:
          description: Parts have been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/partNotFound'
    delete:
      operationId: deleteIngestParts
      tags:
        - ingest
      summary: Delete multiple Parts.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment the ingest Part belongs to.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Parts removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
  ingestPart:
    get:
      operationId: getIngestPart
      tags:
        - ingest
      summary: Gets ingest data for a specific Part.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the Part belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the Part belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment the Part belongs to.
          required: true
          schema:
            type: string
        - name: partId
          in: path
          description: Part to create/update.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Part is returned.
          headers:
            ETag:
              schema:
                type: string
              description: Version of Part, if known.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                  part:
                    $ref: '#/components/schemas/ingestPart'
                example:
                  status: 200
                  part:
                    name: part1
                    rank: 0
                required:
                  - status
                  - part
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/segmentNotFound'
          #   - $ref: '#/components/responses/partNotFound'
    put:
      operationId: putIngestPart
      tags:
        - ingest
      summary: Creates a new or updates an existing Part.
      parameters:
        - name: playlistId
          in: path
          description: Playlist to ingest Part into.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown to ingest Part into.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment to ingest Part into.
          schema:
            type: string
        - name: partId
          in: path
          description: Part to update/create.
          schema:
            type: string
        - name: If-None-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Part will only be updated if the specified ETag does not match. If unspecified, the new data will replace whatever currently exists, regardless of whether the data is actually the same.
        - name: If-Match
          in: header
          # Indicates that the array elements are serialized as a comma-separated list in the header.
          style: simple
          schema:
            type: array
            items:
              type: string
          description: If specified, the Part will only be updated if one of the specified ETags matches.
        - name: ETag
          in: header
          required: true
          schema:
            type: string
          description: ETag to use as version information for Part.
      requestBody:
        description: Contains the Rundown data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingestPart'
            example:
              name: part1
              rank: 0
      responses:
        200:
          description: Part has been updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        201:
          description: Part has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 201
                    example: 201
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/segmentNotFound'
    delete:
      operationId: deleteIngestPart
      tags:
        - ingest
      summary: Deletes a specified ingest Part.
      parameters:
        - name: playlistId
          in: path
          description: Playlist the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: rundownId
          in: path
          description: Rundown the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: segmentId
          in: path
          description: Segment the ingest Part belongs to.
          required: true
          schema:
            type: string
        - name: partId
          in: path
          description: Part to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Part removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    const: 200
                    example: 200
                required:
                  - status
                additionalProperties: false
        404:
          $ref: '#/components/responses/idNotFound'
          # oneOf:
          #   - $ref: '#/components/responses/playlistNotFound'
          #   - $ref: '#/components/responses/rundownNotFound'
          #   - $ref: '#/components/responses/segmentNotFound'

components:
  responses:
    idNotFound:
      # oneOf responses like below don't render correctly with current tools - use playlist as an example for the docs.
      # oneOf:
      #   - $ref: '#/components/responses/playlistNotFound'
      $ref: '#/components/responses/playlistNotFound'
    playlistNotFound:
      description: The specified Playlist does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: number
                const: 404
                example: 404
              notFound:
                type: string
                const: playlist
                example: playlist
              message:
                type: string
                example: The specified Playlist was not found.
            required:
              - status
              - notFound
              - message
            additionalProperties: false
    rundownNotFound:
      description: The specified Rundown does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: number
                const: 404
                example: 404
              notFound:
                type: string
                const: rundown
                example: rundown
              message:
                type: string
                example: The specified Rundown was not found.
            required:
              - status
              - notFound
              - message
            additionalProperties: false
    segmentNotFound:
      description: The specified Segment does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: number
                const: 404
                example: 404
              notFound:
                type: string
                const: segment
                example: segment
              message:
                type: string
                example: The specified Segment was not found.
            required:
              - status
              - notFound
              - message
            additionalProperties: false
    partNotFound:
      description: The specified Part does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: number
                const: 404
                example: 404
              notFound:
                type: string
                const: part
                example: part
              message:
                type: string
                example: The specified Part was not found.
            required:
              - status
              - notFound
              - message
            additionalProperties: false
  schemas:
    ingestPlaylistItem:
      type: object
      properties:
        playlistId:
          type: string
          description: The Id provided by Sofie. This Id will be used for /playlist commands for controlling playlist activations, playback etc.
        rundowns:
          type: array
          description: All rundowns in a Playlist.
          items:
            $ref: '#/components/schemas/ingestRundownItem'
      required:
        - playlistId
        - rundowns
      additionalProperties: false
    ingestRundownItem:
      type: object
      properties:
        externalId:
          type: string
          description: The Id provided by a system external to Sofie that can be used by the same external system to identify this Rundown.
      required:
        - externalId
      additionalProperties: false
    ingestSegmentItem:
      type: object
      properties:
        externalId:
          type: string
          description: The Id provided by a system external to Sofie that can be used by the same external system to identify this Segment.
      required:
        - externalId
      additionalProperties: false
    ingestPartItem:
      type: object
      properties:
        name:
          type: string
        externalId:
          type: string
          description: The Id provided by a system external to Sofie that can be used by the same external system to identify this Part.
      required:
        - name
        - externalId
      additionalProperties: false
    ingestPlaylist:
      type: object
      properties:
        name:
          type: string
      required:
        - name
      additionalProperties: false
    ingestRundown:
      type: object
      properties:
        name:
          type: string
        source:
          type: string
          description: A source type that can be displayed to the end-user. Should identify what type of system (e.g. vendor/product name) the data has been sent from.
          examples:
            - 'Some Product Name'
            - 'Our Company - Some Product Name'
        rank:
          type: number
          description: The position of the Rundown in the parent Playlist.
          inclusiveMinimum: 0.0
        payload:
          type: object
          additionalProperties: true
      required:
        - name
        - source
        - rank
      additionalProperties: false
    ingestSegment:
      type: object
      properties:
        name:
          type: string
        rank:
          type: number
          description: The position of the Segment in the parent Rundown.
          inclusiveMinimum: 0.0
        payload:
          type: object
          additionalProperties: true
      required:
        - name
        - rank
      additionalProperties: false
    ingestPart:
      type: object
      properties:
        name:
          type: string
        rank:
          type: number
          description: The position of the Part in the parent Segment.
        payload:
          type: object
          additionalProperties: true
      required:
        - name
        - rank
      additionalProperties: false
